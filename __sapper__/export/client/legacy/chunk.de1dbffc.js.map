{"version":3,"file":"chunk.de1dbffc.js","sources":["../../../../node_modules/svelte/store.mjs"],"sourcesContent":["function noop() {}\n\nfunction run(fn) {\n\treturn fn();\n}\n\nfunction run_all(fns) {\n\tfns.forEach(run);\n}\n\nfunction is_function(thing) {\n\treturn typeof thing === 'function';\n}\n\nfunction safe_not_equal(a, b) {\n\treturn a != a ? b == b : a !== b || ((a && typeof a === 'object') || typeof a === 'function');\n}\n\n/**\n * Creates a `Readable` store that allows reading by subscription.\n * @param value initial value\n * @param start start and stop notifications for subscriptions\n */\nfunction readable(value, start) {\n    return {\n        subscribe: writable(value, start).subscribe,\n    };\n}\n/**\n * Create a `Writable` store that allows both updating and reading by subscription.\n * @param value initial value\n * @param start start and stop notifications for subscriptions\n */\nfunction writable(value, start = noop) {\n    let stop;\n    const subscribers = [];\n    function set(new_value) {\n        if (safe_not_equal(value, new_value)) {\n            value = new_value;\n            if (!stop) {\n                return; // not ready\n            }\n            subscribers.forEach((s) => s[1]());\n            subscribers.forEach((s) => s[0](value));\n        }\n    }\n    function update(fn) {\n        set(fn(value));\n    }\n    function subscribe$$1(run$$1, invalidate = noop) {\n        const subscriber = [run$$1, invalidate];\n        subscribers.push(subscriber);\n        if (subscribers.length === 1) {\n            stop = start(set) || noop;\n        }\n        run$$1(value);\n        return () => {\n            const index = subscribers.indexOf(subscriber);\n            if (index !== -1) {\n                subscribers.splice(index, 1);\n            }\n            if (subscribers.length === 0) {\n                stop();\n            }\n        };\n    }\n    return { set, update, subscribe: subscribe$$1 };\n}\n/**\n * Derived value store by synchronizing one or more readable stores and\n * applying an aggregation function over its input values.\n * @param stores input stores\n * @param fn function callback that aggregates the values\n * @param initial_value when used asynchronously\n */\nfunction derived(stores, fn, initial_value) {\n    const single = !Array.isArray(stores);\n    const stores_array = single\n        ? [stores]\n        : stores;\n    const auto = fn.length < 2;\n    return readable(initial_value, (set) => {\n        let inited = false;\n        const values = [];\n        let pending = 0;\n        let cleanup = noop;\n        const sync = () => {\n            if (pending) {\n                return;\n            }\n            cleanup();\n            const result = fn(single ? values[0] : values, set);\n            if (auto) {\n                set(result);\n            }\n            else {\n                cleanup = is_function(result) ? result : noop;\n            }\n        };\n        const unsubscribers = stores_array.map((store, i) => store.subscribe((value) => {\n            values[i] = value;\n            pending &= ~(1 << i);\n            if (inited) {\n                sync();\n            }\n        }, () => {\n            pending |= (1 << i);\n        }));\n        inited = true;\n        sync();\n        return function stop() {\n            run_all(unsubscribers);\n            cleanup();\n        };\n    });\n}\n/**\n * Get the current value from a store by subscribing and immediately unsubscribing.\n * @param store readable\n */\nfunction get(store) {\n    let value;\n    store.subscribe((_) => value = _)();\n    return value;\n}\n\nexport { readable, writable, derived, get };\n"],"names":["noop","readable","value","start","subscribe","writable","stop","subscribers","set","new_value","b","a","_typeof","forEach","s","update","fn","run$$1","subscriber","push","length","index","indexOf","splice"],"mappings":"wCAAA,SAASA,KAuBT,SAASC,EAASC,EAAOC,SACd,CACHC,UAAWC,EAASH,EAAOC,GAAOC,WAQ1C,SAASC,EAASH,OACVI,EADiBH,yDAAQH,EAEvBO,EAAc,YACXC,EAAIC,MAtBUC,EAuBOD,GAvBVE,EAuBGT,IAtBdS,EAAID,GAAKA,EAAIC,IAAMD,GAAOC,GAAkB,WAAbC,EAAOD,IAAgC,mBAANA,EAsB/B,IAClCT,EAAQO,GACHH,SAGLC,EAAYM,QAAQ,SAACC,UAAMA,EAAE,OAC7BP,EAAYM,QAAQ,SAACC,UAAMA,EAAE,GAAGZ,KA7B5C,IAAwBS,EAAGD,QAoDhB,CAAEF,IAAAA,EAAKO,gBApBEC,GACZR,EAAIQ,EAAGd,KAmBWE,mBAjBAa,OACZC,EAAa,CAACD,yDADmBjB,UAEvCO,EAAYY,KAAKD,GACU,IAAvBX,EAAYa,SACZd,EAAOH,EAAMK,IAAQR,GAEzBiB,EAAOf,GACA,eACGmB,EAAQd,EAAYe,QAAQJ,IACnB,IAAXG,GACAd,EAAYgB,OAAOF,EAAO,GAEH,IAAvBd,EAAYa,QACZd"}