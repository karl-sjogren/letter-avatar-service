name: 'Build and publish'

on:
  push:
    branches:
      - develop
      - main
      - 'release/**'
      - 'feature/**'
      - 'hotfix/**'
    paths-ignore:
      - 'README.md'
      - 'docs/*'
      - 'scripts/*'
      - '.vscode/*'

permissions:
  checks: write
  contents: write
  pull-requests: write
  actions: read

env:
  DOTNET_SKIP_FIRST_TIME_EXPERIENCE: true
  DOTNET_CLI_TELEMETRY_OPTOUT: true
  DOTNET_NOLOGO: true
  DOTNET_GENERATE_ASPNET_CERTIFICATE: false
  NUGET_CERT_REVOCATION_MODE: offline
  NUGET_PACKAGES: ${{ github.workspace }}/.nuget/packages

jobs:

  net-test:
    name: .NET tests

    strategy:
      matrix:
        os: [
          ubuntu-latest,
          windows-latest,
          macos-latest
        ]
    runs-on: ${{ matrix.os }}

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Cache NuGet packages on Windows
      uses: actions/cache@v4
      if: matrix.os == 'windows-latest'
      with:
        path: ${{ github.workspace }}/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.Build.props') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Restore NuGet packages
      run: dotnet restore --verbosity minimal

    - name: List .NET SDKS
      run: dotnet --list-sdks

    - name: Run .NET tests
      run: dotnet test --configuration Release

    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: matrix.os == 'ubuntu-latest'
      with:
        name: net-test-results
        path: |
          ./**/*.trx
          ./**/coverage.*.cobertura.xml

  test-and-coverage-results:
    name: Publish test and coverage results
    needs: [ net-test ]

    runs-on: ubuntu-latest

    steps:
    # While we don't use sources directly in this job the test reporter wants to check
    # some files through git so we need the sources.
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        clean: false

    - name: Download .NET tests results
      uses: actions/download-artifact@v4
      with:
        name: net-test-results
        path: ./

    - name: Publish .NET tests
      uses: dorny/test-reporter@v1
      with:
        name: ðŸ§ª .NET test results
        path: ./**/*.trx
        reporter: dotnet-trx

    - name: Create history folder
      run: mkdir -p ./coverage-history
      working-directory: ./

    - name: Download historial coverage
      uses: dawidd6/action-download-artifact@v7
      with:
        # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
        # Required, if the artifact is from a different repo
        # Required, if the repo is private a Personal Access Token with `repo` scope is needed
        # github_token: ${{secrets.GITHUB_TOKEN}}
        workflow_conclusion: success
        branch: ${{ github.head_ref }}
        name: coverage-history
        # Optional, a directory where to extract artifact(s), defaults to the current directory
        path: ./coverage-history
        check_artifacts:  true
        search_artifacts: true
        if_no_artifact_found: ignore

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Generate coverage report
      uses: danielpalme/ReportGenerator-GitHub-Action@5.4.3
      with:
        reports: '../**/{coverage.cobertura,cobertura-coverage,coverage.*.cobertura}.xml'
        targetdir: 'coverage-report'
        historydir: 'coverage-history'
        reporttypes: 'Cobertura'
        assemblyfilters: '-xunit*'
        verbosity: 'Info'

    - name: Upload to Codecov
      uses: codecov/codecov-action@v5
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        files: coverage-report/Cobertura.xml

    - name: Upload coverage history
      uses: actions/upload-artifact@v4.3.0
      with:
        name: coverage-history
        path: coverage-history

  net-build:
    name: .NET build
    runs-on: ubuntu-latest
    needs: [ net-test ]

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Restore NuGet packages
      run: dotnet restore --verbosity minimal

    - name: Pack AspNetCore project
      run: dotnet pack ./src/LetterAvatars.AspNetCore/LetterAvatars.AspNetCore.csproj --configuration Release --output artifacts

    - name: Pack Generator project
      run: dotnet pack ./src/LetterAvatars.Generator/LetterAvatars.Generator.csproj --configuration Release --output artifacts

    - name: Upload packages
      uses: actions/upload-artifact@v4
      with:
        name: packages
        path: artifacts/*.nupkg

  publish:
    name: NuGet Publish
    needs: net-build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout sources
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          global.json
        sparse-checkout-cone-mode: false

    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: packages
        path: ./artifacts/

    - name: Install .NET
      uses: actions/setup-dotnet@v4
      with:
        global-json-file: global.json

    - name: Publish package to NuGet.org
      env:
        NUGET_KEY: ${{ secrets.NUGET_KEY }}
      run: dotnet nuget push artifacts/*.nupkg --api-key $NUGET_KEY --source https://api.nuget.org/v3/index.json
      working-directory: ./
